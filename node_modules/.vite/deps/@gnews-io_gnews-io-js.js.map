{
  "version": 3,
  "sources": ["../../@gnews-io/gnews-io-js/dist/index.js"],
  "sourcesContent": ["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/**\n * GNews.io API Client Library\n * A simple wrapper for the GNews.io API\n */\nclass GNews {\n    /**\n     * Creates a new GNews client\n     * @param {string} apiKey - Your GNews.io API key\n     * @param {Object} options - Additional configuration options\n     * @param {string} options.version - API version (default: 'v4')\n     * @param {number} options.maxWait - Maximum time to wait for a response in ms (default: 10000)\n     */\n    constructor(apiKey, options = {}) {\n        if (!apiKey) {\n            throw new Error('API key is required');\n        }\n        this.apiKey = apiKey;\n        this.version = options.version || 'v4';\n        this.maxWait = options.maxWait || 10000;\n        this.baseUrl = `https://gnews.io/api/${this.version}`;\n    }\n    /**\n     * Make a request to the GNews API\n     * @private\n     * @param {string} endpoint - API endpoint\n     * @param {Object} params - Query parameters\n     * @returns {Promise<Object>} - Promise resolving to API response\n     */\n    _request(endpoint_1) {\n        return __awaiter(this, arguments, void 0, function* (endpoint, params = {}) {\n            const url = new URL(`${this.baseUrl}${endpoint}`);\n            // Add API key to all requests\n            url.searchParams.append('apikey', this.apiKey);\n            // Add all other parameters\n            for (const [key, value] of Object.entries(params)) {\n                if (value !== null && value !== undefined) {\n                    url.searchParams.append(key, String(value));\n                }\n            }\n            try {\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), this.maxWait);\n                const response = yield fetch(url.toString(), { signal: controller.signal });\n                clearTimeout(timeoutId);\n                if (!response.ok) {\n                    const errorData = yield response.json().catch(() => ({}));\n                    throw new Error(errorData.error || `HTTP Error: ${response.status}`);\n                }\n                return yield response.json();\n            }\n            catch (error) {\n                if (error instanceof Error && error.name === 'AbortError') {\n                    throw new Error(`Request timed out after ${this.maxWait}ms`);\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get top news headlines\n     * @param {Object} params - Query parameters\n     * @param {string} params.lang - Article language (e.g., 'en')\n     * @param {string} params.country - Article country (e.g., 'us')\n     * @param {number} params.max - Maximum number of articles to return\n     * @param {string} params.category - News category (top, world, nation, business, technology, entertainment, sports, science, health)\n     * @param {string} params.in - Where to search (title, description, content)\n     * @param {string} params.nullable - Fields that can be null\n     * @param {string} params.from - Start date in 'YYYY-MM-DD' format\n     * @param {string} params.to - End date in 'YYYY-MM-DD' format\n     * @param {number} params.page - (paid subscription) Page number for pagination\n     * @param {string} params.expand - (paid subscription) Expand articles content\n     * @returns {Promise<Object>} - Promise resolving to headlines response\n     */\n    topHeadlines(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._request('/top-headlines', params);\n        });\n    }\n    /**\n     * Search for news articles\n     * @param {string} q - Search query (required)\n     * @param {Object} params - Query parameters\n     * @param {string} params.lang - Article language (e.g., 'en')\n     * @param {string} params.country - Article country (e.g., 'us')\n     * @param {number} params.max - Maximum number of articles to return\n     * @param {string} params.in - Where to search (title, description, content)\n     * @param {string} params.nullable - Fields that can be null\n     * @param {string} params.from - Start date in 'YYYY-MM-DD' format\n     * @param {string} params.to - End date in 'YYYY-MM-DD' format\n     * @param {string} params.sortby - Sort articles by (relevance, date, publish-time)\n     * @param {number} params.page - (paid subscription) Page number for pagination\n     * @param {string} params.expand - (paid subscription) Expand articles content\n     * @returns {Promise<Object>} - Promise resolving to search response\n     */\n    search(q, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!q) {\n                throw new Error('Search query (q) is required');\n            }\n            params.q = q;\n            return this._request('/search', params);\n        });\n    }\n}\n// Pour le navigateur\nif (typeof window !== 'undefined') {\n    window.GNews = GNews;\n}\nmodule.exports = GNews;\n"],
  "mappings": ";;;;;AAAA;AAAA;AACA,QAAI,YAAa,WAAQ,QAAK,aAAc,SAAU,SAAS,YAAY,GAAG,WAAW;AACrF,eAAS,MAAM,OAAO;AAAE,eAAO,iBAAiB,IAAI,QAAQ,IAAI,EAAE,SAAU,SAAS;AAAE,kBAAQ,KAAK;AAAA,QAAG,CAAC;AAAA,MAAG;AAC3G,aAAO,KAAK,MAAM,IAAI,UAAU,SAAU,SAAS,QAAQ;AACvD,iBAAS,UAAU,OAAO;AAAE,cAAI;AAAE,iBAAK,UAAU,KAAK,KAAK,CAAC;AAAA,UAAG,SAAS,GAAG;AAAE,mBAAO,CAAC;AAAA,UAAG;AAAA,QAAE;AAC1F,iBAAS,SAAS,OAAO;AAAE,cAAI;AAAE,iBAAK,UAAU,OAAO,EAAE,KAAK,CAAC;AAAA,UAAG,SAAS,GAAG;AAAE,mBAAO,CAAC;AAAA,UAAG;AAAA,QAAE;AAC7F,iBAAS,KAAK,QAAQ;AAAE,iBAAO,OAAO,QAAQ,OAAO,KAAK,IAAI,MAAM,OAAO,KAAK,EAAE,KAAK,WAAW,QAAQ;AAAA,QAAG;AAC7G,cAAM,YAAY,UAAU,MAAM,SAAS,cAAc,CAAC,CAAC,GAAG,KAAK,CAAC;AAAA,MACxE,CAAC;AAAA,IACL;AAKA,QAAM,QAAN,MAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQR,YAAY,QAAQ,UAAU,CAAC,GAAG;AAC9B,YAAI,CAAC,QAAQ;AACT,gBAAM,IAAI,MAAM,qBAAqB;AAAA,QACzC;AACA,aAAK,SAAS;AACd,aAAK,UAAU,QAAQ,WAAW;AAClC,aAAK,UAAU,QAAQ,WAAW;AAClC,aAAK,UAAU,wBAAwB,KAAK,OAAO;AAAA,MACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,SAAS,YAAY;AACjB,eAAO,UAAU,MAAM,WAAW,QAAQ,WAAW,UAAU,SAAS,CAAC,GAAG;AACxE,gBAAM,MAAM,IAAI,IAAI,GAAG,KAAK,OAAO,GAAG,QAAQ,EAAE;AAEhD,cAAI,aAAa,OAAO,UAAU,KAAK,MAAM;AAE7C,qBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AAC/C,gBAAI,UAAU,QAAQ,UAAU,QAAW;AACvC,kBAAI,aAAa,OAAO,KAAK,OAAO,KAAK,CAAC;AAAA,YAC9C;AAAA,UACJ;AACA,cAAI;AACA,kBAAM,aAAa,IAAI,gBAAgB;AACvC,kBAAM,YAAY,WAAW,MAAM,WAAW,MAAM,GAAG,KAAK,OAAO;AACnE,kBAAM,WAAW,MAAM,MAAM,IAAI,SAAS,GAAG,EAAE,QAAQ,WAAW,OAAO,CAAC;AAC1E,yBAAa,SAAS;AACtB,gBAAI,CAAC,SAAS,IAAI;AACd,oBAAM,YAAY,MAAM,SAAS,KAAK,EAAE,MAAM,OAAO,CAAC,EAAE;AACxD,oBAAM,IAAI,MAAM,UAAU,SAAS,eAAe,SAAS,MAAM,EAAE;AAAA,YACvE;AACA,mBAAO,MAAM,SAAS,KAAK;AAAA,UAC/B,SACO,OAAO;AACV,gBAAI,iBAAiB,SAAS,MAAM,SAAS,cAAc;AACvD,oBAAM,IAAI,MAAM,2BAA2B,KAAK,OAAO,IAAI;AAAA,YAC/D;AACA,kBAAM;AAAA,UACV;AAAA,QACJ,CAAC;AAAA,MACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAgBA,aAAa,QAAQ;AACjB,eAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAChD,iBAAO,KAAK,SAAS,kBAAkB,MAAM;AAAA,QACjD,CAAC;AAAA,MACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAiBA,OAAO,GAAG,QAAQ;AACd,eAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAChD,cAAI,CAAC,GAAG;AACJ,kBAAM,IAAI,MAAM,8BAA8B;AAAA,UAClD;AACA,iBAAO,IAAI;AACX,iBAAO,KAAK,SAAS,WAAW,MAAM;AAAA,QAC1C,CAAC;AAAA,MACL;AAAA,IACJ;AAEA,QAAI,OAAO,WAAW,aAAa;AAC/B,aAAO,QAAQ;AAAA,IACnB;AACA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
